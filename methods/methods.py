import io
from PIL import Image
import disnake
from disnake.ext import commands
from config import LOG_CHANNEL
import logging
from config import client

logger = logging.getLogger(__name__)


async def process_image(attachment):
    """
    –ß–¢–û –≠–¢–û –ó–ê üíÄüíÄüíÄ
    """
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_bytes = await attachment.read()

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–∞–º–∏
        image_stream = io.BytesIO(image_bytes)

        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Pillow –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGBA
        image = Image.open(image_stream).convert("RGBA")

        # –°–æ–∑–¥–∞–µ–º gif –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        gif_bytes = io.BytesIO()
        image.save(gif_bytes, format="GIF", save_all=True, optimize=False)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        gif_bytes.seek(0)

        return gif_bytes
    except Exception as e:
        print(f"Error process_image: {e}")
        logger.error(f"Error process_image: {e}")


async def process_mem_image(attachment):
    """
    –ß–¢–û –≠–¢–û –ó–ê üíÄüíÄüíÄ
    """
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_bytes = await attachment.read()

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–∞–º–∏
        image_stream = io.BytesIO(image_bytes)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGBA
        main_image = Image.open(image_stream).convert("RGBA")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        main_width, main_height = main_image.size

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª bro.png —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGBA
        bro_image = Image.open("bro.png").convert("RGBA")

        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä "bro.png" —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –µ–≥–æ —à–∏—Ä–∏–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ —à–∏—Ä–∏–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        bro_image_resized = bro_image.resize(
            (main_width, int(main_width / bro_image.width * bro_image.height))
        )

        # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è bro –Ω–∞ main
        main_image.paste(bro_image_resized, (0, 0), bro_image_resized)

        # –°–æ–∑–¥–∞–µ–º gif –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        gif_bytes = io.BytesIO()
        main_image.save(gif_bytes, format="GIF", save_all=True, optimize=False)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        gif_bytes.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º gif –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return gif_bytes
    except Exception as e:
        print(f"Error process_mem_image: {e}")
        logger.error(f"Error process_mem_image: {e}")


async def log(bot, message, img):
    try:
        channel_log = bot.get_channel(LOG_CHANNEL)
        img.seek(0)

        await channel_log.send(
            f"<@{message.author.id}> ({message.author.name}) —Å–æ–∑–¥–∞–ª –≥–∏—Ñ–∫—É:",
            file=disnake.File(img, filename="JustGM.gif"),
        )
    except Exception as e:
        print(f"Log error: {e}")
        logger.error(f"Log error: {e}")


async def ask(
    question: str,
    ai: str,
    role: str,
):
    global client

    try:
        chat_completion = client.chat.completions.create(
            messages=[
                    # Set an optional system message. This sets the behavior of the
                    # assistant and can be used to provide specific instructions for
                    # how it should behave throughout the conversation.
                    {
                        "role": "system",
                        "content": role
                    },
                    # Set a user message for the assistant to respond to.
                    {
                        "role": "user",
                        "content": question,
                    }
                ],
            # model="llama3-8b-8192",
            # model="llama-3.3-70b-versatile",
            model=ai,


            stream=False,
        )

        logger.info(f"ROLE:{role}| QUESTION:{question}| API RESPONSE: {chat_completion}")
        return chat_completion.choices[0].message.content
    except Exception as e:
        logger.error(f'AI ask error: {e}')
        return "Error"
